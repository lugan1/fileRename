plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
}

group = 'org.example'
version = project.findProperty("version") ?: "1.0.0"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(19)
}


// ────────────────────────────────────────────────────────────────────────────
// 1️⃣ .exe 생성 & .zip 패키징 (unchanged)
// ────────────────────────────────────────────────────────────────────────────

tasks.register('packageExe', Exec) {
    group = 'distribution'
    description = 'jpackage로 .exe 빌드'
    def jarName = "fileRename-${project.version}.jar"
    commandLine 'jpackage',
            '--type', 'app-image',
            '--input', 'build/libs',
            '--name', 'MyApp',
            '--main-jar', jarName,
            '--main-class', 'org.example.Main',
            '--dest', 'build/exe'
}

tasks.register('packageZipExe', Zip) {
    group = 'distribution'
    description = '압축된 exe 배포파일(.zip)을 생성합니다.'
    dependsOn 'packageExe'
    from file("build/exe/MyApp")
    destinationDirectory.set(file("build/zip"))
    archiveFileName.set("MyApp.zip")
}


// ────────────────────────────────────────────────────────────────────────────
// 2️⃣ 버전 증가
// ────────────────────────────────────────────────────────────────────────────

tasks.register('bumpVersion') {
    group = 'distribution'
    description = 'gradle.properties의 version 을 patch 레벨로 1 증가시킵니다.'
    doLast {
        def propsFile = file("gradle.properties")
        def props = new Properties()
        props.load(propsFile.newInputStream())

        def oldVersion = props.getProperty("version")
        def parts = oldVersion.tokenize('.').collect { it.toInteger() }
        def newVersion = "${parts[0]}.${parts[1]}.${parts[2] + 1}"

        println "📦 버전 증가: ${oldVersion} → ${newVersion}"
        props.setProperty("version", newVersion)
        props.store(propsFile.newWriter(), null)
    }
}


// ────────────────────────────────────────────────────────────────────────────
// 3️⃣ CHANGELOG 갱신
// ────────────────────────────────────────────────────────────────────────────

tasks.register('updateChangelog') {
    group = 'documentation'
    description = 'CHANGELOG.md 앞에 최신 커밋 로그를 추가합니다.'
    dependsOn 'bumpVersion'
    doLast {
        // bumpVersion 에서 갱신된 gradle.properties 읽어오기
        def props = new Properties()
        props.load(file("gradle.properties").newInputStream())
        def newVersion = props.getProperty("version")
        def tag = "v${newVersion}"
        def date = new Date().format("yyyy-MM-dd")

        // 이전 태그
        def versionParts = newVersion.tokenize('.').collect { it.toInteger() }
        def prevTag = "v${versionParts[0]}.${versionParts[1]}.${versionParts[2] - 1}"

        // 커밋 로그
        def logCmd = ["git", "log", "${prevTag}..HEAD", "--pretty=format:- %s"]
        def commitLog = logCmd.execute().text.trim()

        // CHANGELOG 업데이트
        def changelog = file("CHANGELOG.md")
        def header = "## ${tag} - ${date}\n${commitLog}\n\n"
        changelog.text = header + (changelog.exists() ? changelog.text : "")
        println "📝 CHANGELOG.md 갱신 완료"
    }
}


// ────────────────────────────────────────────────────────────────────────────
// 4️⃣ GitHub Release 업로드
// ────────────────────────────────────────────────────────────────────────────

tasks.register('uploadRelease', Exec) {
    group = 'distribution'
    description = 'GitHub CLI(gh)를 사용해 Release를 생성/업로드합니다.'
    dependsOn 'packageZipExe', 'updateChangelog'

    doFirst {
        // release 관련 변수 재계산
        def props = new Properties()
        props.load(file("gradle.properties").newInputStream())
        ext.newVersion = props.getProperty("version")
        ext.tag = "v${newVersion}"
        ext.zipPath = "${project.rootDir}/build/zip/MyApp.zip"
        ext.title = "Release ${newVersion}"
    }

    // OS별 gh 커맨드 구성
    def isWindows = System.properties['os.name'].toLowerCase().contains('windows')
    def ghCmd = isWindows
            ? ["C:\\Program Files\\GitHub CLI\\gh.exe", "release", "create", "${tag}", "${zipPath}", "--title", "${title}", "--notes", "자동 릴리즈 업로드입니다."]
            : ["gh", "release", "create", "${tag}", "${zipPath}", "--title", "${title}", "--notes", "자동 릴리즈 업로드입니다."]

    commandLine ghCmd
    environment "GITHUB_TOKEN", System.getenv("GITHUB_TOKEN")
}


// ────────────────────────────────────────────────────────────────────────────
// 5️⃣ 최종 워크플로우 Task
// ────────────────────────────────────────────────────────────────────────────

tasks.register('releaseAll') {
    group = 'distribution'
    description = '1) 패키징 → 2) 버전 bump → 3) CHANGELOG 갱신 → 4) GitHub 릴리즈'
    dependsOn 'uploadRelease'
}
